#!/usr/bin/env python


"""
Script that will strip away data type information from a JSON file generated by
mongoexport.

For example the following JSON structure

    {
        "vector": [
            {
            "$int": -67
            },
            {
            "$int": -6
            },
            {
            "$int": -1
            }
        ]
    }

will be converted to

    {
        "vector": [
            -67,
            -6,
            -1
        ]
    }
"""

import sys
import json
import re
from datetime import datetime
from argparse import ArgumentParser, FileType

if sys.version_info[0] < 3:
    int_or_long = (int, long)
else:
    int_or_long = int


_TZINFO_RE = re.compile('([+\-])?(\d\d):?(\d\d)')


def date_converter(value):
    if isinstance(value, int_or_long):
        return value
   #dt = datetime.strptime(value[:], "%Y-%m-%dT%H:%M:%S.%fZ")
    dt = (datetime.strptime(value[:], "%Y-%m-%dT%H:%M:%S.%fZ") - datetime(1970,1,1)).total_seconds()
    return dt


def timestamp_converter(value):
    if len(str(value)) <= 10:
        return value * 1000
    return value


type_converter = {
    'date': date_converter,
    'timestamp': timestamp_converter,
    'undefined': lambda x: None
}


def extract_value(value, parent_type=None):
    if isinstance(value, dict):
        if len(value) == 1 :
            for k, v in value.items():
                if k.startswith('$'):
                    return extract_value(v, k.lstrip('$'))
        return {k.lstrip('$'): extract_value(v, parent_type)
                for (k, v) in value.items()}
    if isinstance(value, list):
        return [extract_value(v, parent_type) for v in value]
    if parent_type:
        converter = type_converter.get(parent_type)
        if converter:
            return converter(value)
    return value


def convert(d):
    newdict = {}
    for k, v in d.items():
        if k == '_id':
            newdict['id'] = extract_value(v)
        else:
            newdict[k] = extract_value(v)
    return newdict


def main():
    parser = ArgumentParser('convert_json')
    parser.add_argument(
        '-i', '--input', type=FileType('r'), nargs='?', default=sys.stdin)
    parser.add_argument(
        '-o', '--output', type=FileType('w'), nargs='?', default=sys.stdout)
    args = parser.parse_args()

    input_dicts = (json.loads(line) for line in args.input)
    converted_dicts = (convert(d) for d in input_dicts)
    output_lines = (json.dumps(d) for d in converted_dicts)
    args.output.write('[')
    for line in output_lines:
        args.output.write(line + ',' + '\n')
    args.output.write(']')


if __name__ == '__main__':
    main()

